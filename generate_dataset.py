


#standard library
import csv
from ntpath import join
import os
import gzip
import shutil
from pathlib import Path
#third party
import requests
import pybedtools 
#project
from chr_info import chr_length, url_species
from requests_progress_bar import ProgressBar 



def download_fasta_ref(species: str):
    folder = './ref_datasets/'
    mkdir(folder)
    species_ref = Path('./ref_datasets/hg38.fa')
    if not species_ref.exists():
        download_file(species,folder)
    chr_to_bed(species, f'{folder}/{species}.fa')

def download_file(species: str, folder: str):
    url = url_species[species]
    with requests.get(url, stream=True) as r:
        chunk_size = 1024 # max of single time request
        content_size = int(r.headers['content-length']) # content sizel
        file_name = f'{folder}/{species}.fa.gz'
        progress = ProgressBar(file_name, total=content_size,
                                     unit="KB", chunk_size=chunk_size, run_status="downloading", fin_status="finish")
        with open(file_name, 'wb') as f:
        #with tqdm.wrapattr(open(file_name, 'wb'), "write", total=content_size, 
                    #desc="Downloading", colour='green') as f:
            #shutil.copyfileobj(r.raw, f)
            for data in r.iter_content(chunk_size=chunk_size):
                f.write(data)
                progress.refresh(count=len(data))
    un_gz(file_name,species,folder)

def un_gz(file_name: str, species: str, folder: str):
    print('unziping……\U0001F600\U0001F63C\U0001F9B2\U0001F349\U0001F34A')
    # unzip_genofile = gzip.GzipFile(file_name)
    # content = unzip_genofile.read()
    with gzip.open(file_name, 'rb') as f_in:
        with open(f'{folder}/{species}.fa', 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out)
        #fasta_filename = ''
    # with open(f'{species}.fa', "w+").write(str(content)) as f:
    #     fasta_filename = f
    #chr_to_bed(species, fasta_filename)



def chr_to_bed(species: str, fasta_filename):
    print('Genertating reference datasets\U0001F95D\U0001F353\U0001F364\U0001F95F')
    '''
    species is the name of reference genome,
    e.g. hg38
    fasta_filename is reference genome.

    '''
    for chr, length in chr_length.items():  
        pos = []
        for i in range(1, length, 100000):
            end = i + 100000
            if end > length:
                end = length
            pos.append("\t".join([str(chr), str(i), str(end)]))
        use_bedtools(species, chr, '\n'.join(pos), fasta_filename)
        
def use_bedtools(species: str, chr: str, chr_fasta: str, fasta_filename: str):
    '''
    species is the name of reference genome,
    e.g. hg38
    chr_fasta and chr is generated by chr_to_bed

    '''
    bedtools_information = pybedtools.BedTool(chr_fasta, from_string=True)
    bedtools_information = bedtools_information.sequence(fi=fasta_filename)
    seq_bed = open(bedtools_information.seqfn).read()
    transfer_fasta(seq_bed, species, chr)

def transfer_fasta(seq_bed: str, species: str, chr: str):
    chr_withlines = []
    l = []
    seq_dataset = seq_bed.split('\n')
    for GCTA_line in seq_dataset:
            if GCTA_line.startswith('>'):
                if len(l) == 0:
                    l.append(GCTA_line.strip('>'))
                else:
                    chr_withlines.append(",".join(l))
                    l = []
            else:
                l.append(GCTA_line.strip('\n'))
                
    fasta_lines(chr_withlines, species, chr)

def mkdir(path):
	folder = os.path.exists(path)
	if not folder:                   
		os.makedirs(path)            
          
def fasta_lines(chr_withlines: list, species: str, chr: str):
    folder = "./ref_datasets/datasets/"
    mkdir(folder)  
    transfer_to_datasets = f'{folder}/{species}_{chr}_ref.csv'
    with open(transfer_to_datasets, 'w+', newline="") as ttd:
        csv_writer = csv.writer(ttd, delimiter="\t", lineterminator="\n")               
        csv_writer.writerow(chr_withlines)

if __name__ == "__main__":
    try:
        download_fasta_ref('hg38')
    except KeyboardInterrupt:
        print("Interrupted with CTRL-C, exiting...")


        #realiaze more thread download