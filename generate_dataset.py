#standard library
import csv
import os
#third party
import requests
import pybedtools 
#project
from chr_info import chr_length

def download_fasta_ref():
    r = requests.get('https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz')

def chr_to_bed(species: str, fasta_filename):
    print('chr_to_bed')
    '''
    species is the name of reference genome,
    e.g. hg38
    fasta_filename is reference genome.

    '''
    for chr, length in chr_length.items():  
        pos = []
        for i in range(1, length, 100000):
            end = i + 100000
            if end > length:
                end = length
            pos.append("\t".join([str(chr), str(i), str(end)]))
        use_bedtools(species, chr, '\n'.join(pos), fasta_filename)
        
def use_bedtools(species: str, chr: str, chr_fasta: str, fasta_filename: str):
    print('use_bedtools')
    '''
    species is the name of reference genome,
    e.g. hg38
    chr_fasta and chr is generated by chr_to_bed

    '''
    bedtools_information = pybedtools.BedTool(chr_fasta, from_string=True)
    fasta = pybedtools.example_filename(fasta_filename)
    bedtools_information = bedtools_information.sequence(fi=fasta)
    seq_bed = open(bedtools_information.seqfn).read()
    transfer_fasta(seq_bed, species, chr)

def transfer_fasta(seq_bed: str, species: str, chr: str):
    print('transfer_fasta')
    chr_withlines = []
    l = []
    seq_dataset = seq_bed.split('\n')
    for GCTA_line in seq_dataset:
            if GCTA_line.startswith('>'):
                if len(l) == 0:
                    l.append(GCTA_line)
                else:
                    chr_withlines.append(l)
                    l = []
            else:
                l.append(GCTA_line.strip('\n'))
                
    fasta_lines(chr_withlines, species, chr)

def mkdir(path):
	folder = os.path.exists(path)
 
	if not folder:                   
		os.makedirs(path)            
		print ("---  new folder...  ---")
		print ("---  OK  ---")
 
	else:
		print ("---  There is this folder!  ---")

          

def fasta_lines(chr_withlines: list, species: str, chr: str):
    file = "./ref_datasets/"
    mkdir(file)  
    transfer_to_datasets = f'{file}/{species}_{chr}_ref.csv'
    with open(transfer_to_datasets, 'w+', newline="") as ttd:
        csv_writer = csv.writer(ttd, delimiter="\t", lineterminator="\n")               
        csv_writer.writerow(chr_withlines)

if __name__ == "__main__":
    try:
        chr_to_bed('hg38', '/home/sdb1/youzi/hg38/hg38.fa')
    except KeyboardInterrupt:
        print("Interrupted with CTRL-C, exiting...")